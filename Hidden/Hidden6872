          "version" ) echo "Version $Version"
                      ;;
               "ql" ) echo "Get path, file name, and extension:"
                      echo "-> path [line number] [indent depth (number)] - Get path from /path/filename.ext"
                      echo "-> fnwe [line number] [indent depth (number)] - Get filename.ext from /path/filename.ext"
                      echo "-> fn [line number] [indent depth (number)] - Get filename from /path/filename.ext"
                      echo "-> ext [line number] [indent depth (number)] - Get extension from /path/filename.ext"
                      echo ""
                      echo "I/Os:"
                      echo "-> lvar [line number] [indent depth (number)] - Load variable from file"
                      echo "-> svar [line number] [indent depth (number)] - Save variable to file"
                      echo "-> larray [line number] [indent depth (number)] - Load array from file"
                      echo "-> sarray [line number] [indent depth (number)] - Save array to file"
                      echo "-> ltable [line number] [indent depth (number)] - Load data table from file"
                      echo "-> stable [line number] [indent depth (number)] - Save data table to file"
                      echo "-> dtable [line number] [indent depth (number)] - Display data table"
                      echo "-> dynavar [line number] [indent depth (number)] - Dynamic variable read/write demo operation. Tricky operation in bash, but you need to understand how to read/write a dynamic variable(who's name was not pre-defined but generated or loaded from a file) to be able to work with tables... (I figured that incrementation is simple yet requires both reading and writing a value to/from the same variable...)"
                      echo ""
                      echo "Planned but not yet available:"
                      echo "Options:"
                      echo "-> --help [line number] [indent depth (number)] - Simple help option"
                      echo "-> rop [line number] [indent depth (number)] - Recursive option processing"
                      echo "Info gathering:"
                      echo "-> minfo [line number] [indent depth (number)] - Machine info... CPU cores, available memory, OS, kernel, etc."
                      echo "-> ninfo [line number] [indent depth (number)] - Network info... IP address, MAC address, online machines, etc."
                      echo "And maybe some other extras..."
                      echo ""
                      ;;
        "templates" ) echo "Available templates:"
                      echo "-> MIN - Minimalistic template... (With basic functionality only...)"
                      echo "-> INTER - Interactive template (Base template of this tool. It is useful for controlling another scipt by editing variables in config files, testing tools, editors, etc.)"
                      echo "-> MTT - Multi threaded template (Capable of detecting preparing, starting and controlling multiple simultaneous tasks to use all CPU cores. Additionally it also checks for root user and sets priority if runs as root to maximize efficiency...)"
                      echo ""
                      ;;
             "help" ) echo "Insertables:"
                      echo "-> if [line number] [indent depth (number)] - Inserts an if statement."
                      echo "-> ife [line number] [indent depth (number)] - Inserts an if-else statement."
                      echo "-> for [line number] [indent depth (number)] - Inserts a for loop."
                      echo "-> while [line number] [indent depth (number)] - Inserts a while loop."
                      echo "-> case [line number] [indent depth (number)] - Inserts a case statement."
                      echo "-> nc [line number] [indent depth (number)] - Inserts a new entry for case statement."
                      echo "-> function [line number] - Inserts an empty function."
                      echo "-> debug [line number] - An echo statement with auto-numbered debug message, marked for removal by cleanup"
                      echo ""
                      echo "Editing functionalities:"
                      echo "-> hide [from line number] [to line number] - Hide lines and replace with a marker."
                      echo "-> unhide [number of marker] - Unhides lines marked by that marker only."
                      echo "-> unhide - Unhides all hidden lines. (Run this before trying to run your script!)"
                      echo "-> comment [from line number] [to line number] - Comment lines"
                      echo "-> uncomment [from line number] [to line number] - Uncomment lines"
                      echo "-> indent [from line number] [to line number] [indent depth (number)] - Indents lines"
                      echo "-> unindent [from line number] [to line number] [indent depth (number)] - Reduces indentation of lines"
                      echo "-> mark [from line number] [to line number] - Mark lines for cleanup"
                      echo "-> unmark [from line number] [to line number] - Unmark marked/debug lines"
                      echo "-> cleanup - Removes debug messages and marked lines (Only what you can see... This way you can hide a message you don't yet want removed.)"
                      echo ""
                      echo "Generic functionalities:"
                      echo "-> file - Edit another file"
                      echo "-> ofile - Optional output file (If an output file is specified running the unhide command without a marker specified will compile the script into the output file, and leave the original and it's parts intact.)"
                      echo "-> version - Shows current version."
                      echo "-> help - Shows these options."
                      echo "-> exit - Ends the loop..."
                      echo ""
                      echo "Lists of other functionalities:"
                      echo "-> ql - Quick list of useful command structures available for insertion."
                      echo "-> templates - Lists the available templates. (This can be useful when starting new script.)"
                      echo ""
                      ;;
                 "" ) : #Otherwise it gives the error below when it's null...
                      ;;
                   *) echo "Error: $Answer is an unknown command!"
                      ;;
